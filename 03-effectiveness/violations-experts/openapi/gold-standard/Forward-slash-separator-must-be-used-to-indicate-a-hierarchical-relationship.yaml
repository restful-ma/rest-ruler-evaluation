openapi: 3.0.3
info:
  description: This is an example OpenAPI definition file.
  version: 0.1.0
  title: Example OpenAPI Definition File
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.example.com/v1
    description: Production server (uses live data)
  - url: https://sandbox-api.example.com:8443/v1
    description: Sandbox server (uses test data)
paths:
  /{userId}/users:
    get:
      tags:
        - kotstein
      description: Returns the details of a user identified via ID
      summary: Get a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        404:
          description: A user with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
  /users.{userId}.cv.place-of-birth:
    get:
      tags:
        - kotstein
      description: Returns the details of place of birth for a user identified via ID
      summary: Get a specific birth location
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BirthLocation"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        404:
          description: A user with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
  # hierachie
  /employees/{employee-id}/companies/team:
    get:
      tags:
        - silva
      description: Returns the details of a employee identified via ID
      summary: Get a specific employee
      parameters:
        - name: employee-id
          in: path
          required: true
          description: The ID of the employee
          schema:
            type: number
            minimum: 1
      responses:
        200:
          description: Employee object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        404:
          description: A user with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"

  /activities/{Id}/participants/{participantId}-status-{status}:
    post:
      tags:
        - mohs
      description: Create an activity for participants
      summary: Create an activity
      parameters:
        - name: Id
          in: path
          required: true
          schema:
            type: string
            minimum: 1
        - name: participantId
          in: path
          required: true
          schema:
            type: string
            minimum: 1
        - name: status
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantStatus'    
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipantStatus"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        404:
          description: A user with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
  /cases-high-prio/{caseId}:
    get:
      description: Returns the details of a high-pririty case identified via case Id
      summary: Returns a high prio case
      parameters:
        - name: caseId
          in: path
          required: true
          description: The ID of the case
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: Case object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Case"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        404:
          description: A user with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
  /houses-{houseId}-rooms:                    
    post:
      tags:
        - pfaff
      description: Add a new room to a house
      summary: Add a new room to a house
      parameters:
        - name: houseId
          in: path
          required: true
          description: The ID of the house
          schema:
            type: string
            minimum: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'            
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
  /employee/departments/{id}:
    get:
      tags:
        - bogner
      description: Returns the details of a employees identified via ID
      summary: Get a specific department
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the department
          schema:
            type: number
            minimum: 1
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Department"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        404:
          description: A user with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
  /departments\{departmentId}\employees\{employeeId}:
    get:
      tags:
        - bogner
      description: Returns the details of a employees identified via ID
      summary: Get a specific employee
      parameters:
        - name: departmentId
          in: path
          required: true
          description: The ID of the department
          schema:
            type: number
            minimum: 1
        - name: employeeId
          in: path
          required: true
          description: The ID of the employee
          schema:
            type: number
            minimum: 1
      responses:
        200:
          description: Employee object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        404:
          description: A user with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
  # replace slash with hyphen and mix
  /team-player/users:
    get:
      tags:
        - betka
      description: Returns the details of a user
      summary: Get a specific user
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        404:
          description: A user with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
components:
  schemas:
    User:
      description: A user of the system
      type: object
      properties:
        userId:
          type: number
        userName:
          type: string
        email:
          type: string
    BirthLocation:
      description: A user of the system with their birth location
      type: object
      properties:
        userId:
          type: number
        name:
          type: string
        placeOfBirth:
          type: string
    ParticipantStatus:
      description: status of a participant 
      type: object
      properties:
        participantId:
          type: number
        activityId:
          type: number
        currentStatus:
          type: string
    Case: 
      description: A high priority case
      type: object
      properties:
        caseId:
          type: number
        name:
          type: string
        description:
          type: string
    Department:
      description: a department
      type: object
      properties:
        departmentNo:
          type: number
        location:
          type: string
        headOfDepart:
          type: string
    Employee:
      description: A employee of a department
      type: object
      properties:
        userId:
          type: number
        userName:
          type: string
        email:
          type: string
    Room:
      description: A room
      type: object
      properties:
        roomId:
          type: number
        roomName:
          type: string  
    GenericResponse:
      description: A generic response object with a message attribute
      type: object
      properties:
        message:
          type: string
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
security:
  - BasicAuth: []
