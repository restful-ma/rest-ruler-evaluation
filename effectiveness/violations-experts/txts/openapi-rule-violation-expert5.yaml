openapi: 3.0.3
info:
  description: This is an example OpenAPI definition file.
  version: 0.1.0
  title: Example OpenAPI Definition File
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://api.example.com/v1
    description: Production server (uses live data)
  - url: https://sandbox-api.example.com:8443/v1
    description: Sandbox server (uses test data)
paths:
  /users:
    get:
      tags:
        - user management
      description: Returns a list of all users
      summary: Get all users
      responses:
        200:
          description: Array of user objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
    post:
      tags:
        - user management
      description: Creates a new user with details
      summary: Create a new user
      requestBody:
        description: Details of the new user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: Successful request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        400:
          description: The specified user details are invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
  # violates rule #4
  /users/{userId}/details:
    post:
      tags:
        - user management
      description: Returns the details of a user identified via ID
      summary: Get a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  # violates 5
  /premiumusers/{userId}:
    get:
      tags:
        - user management
      description: Returns the details of a user identified via ID
      summary: Get a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        404:
          description: A user with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
  # violates 7 (should be "cases")
  /case/high-priority/{caseId}:
    get:
      description: Returns the details of a case identified via case Id
      parameters:
        - name: caseId
          in: path
          required: true
          description: The ID of the case
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  # violates 8 (should cases/high-priority)
  /cases-high-prio/{caseId}:
    get:
      description: Returns the details of a high-pririty case identified via case Id
      parameters:
        - name: caseId
          in: path
          required: true
          description: The ID of the case
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  # violates 9
  /my-cases/top-priority-cases/details:
    get:
      description: Returns the details of a top-priority case
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  # very OK URL
  /example-cases/{caseId}/details:
    get:
      description: Returns the details of a case
      parameters:
        - name: caseId
          in: path
          required: true
          description: The ID of the case
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  # violates 10
  /example-cases/:
    get:
      description: Returns all example cases
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                # should be "Users"
                $ref: "#/components/schemas/User"
  # violates 13
  /example_cases/:
    get:
      description: Returns all example cases
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                # should be "Users"
                $ref: "#/components/schemas/User"
  # violates 6
  /PremiumUsers/{userId}:
    get:
      tags:
        - user management
      description: Returns the details of a user identified via ID
      summary: Get a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        404:
          description: A user with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
  /users/{userId}:
    get:
      tags:
        - user management
      description: Returns the details of a user identified via ID
      summary: Get a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: User object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        404:
          description: A user with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
    put:
      tags:
        - user management
      description: Updates the details of a specific user identified via ID
      summary: Update a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user
          schema:
            type: string
            minimum: 1
      requestBody:
        description: A user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: Successful request
          content:
            text/plain:
              schema:
                type: string
        400:
          description: The specified user details are invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        404:
          description: A user with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
    delete:
      tags:
        - user management
      description: Deletes a specific user identified via ID
      summary: Delete a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user who should be deleted
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: Successfully deleted user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        404:
          description: A user with the specified ID was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
  # File extensions not in URI
  /users/{userId}/avatar.heic:
    parameters:
      - name: userId
        in: path
        required: true
        description: The ID of the user
        schema:
          type: string
          minimum: 1
    get:
      responses:
        200:
          description: Avatar image of the user
          content:
              image/heic:
                schema: 
                  type: string
                  format: binary
  # violates "CRUD function names should not be used in URIs"
  # I used a synonym
  /users/{userId}/prune:
    parameters:
      - name: userId
        in: path
        required: true
        description: The ID of the user
        schema:
          type: string
          minimum: 1
    delete:
      tags:
        - user management
      description: Deletesa user
      responses:
        # wrong response code - this is no conent - there should be no content
        204:
          description: Successfully deleted user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"
  # violates "CRUD function names should not be used in URIs"
  /users/{userId}/delete:
    parameters:
      - name: userId
        in: path
        required: true
        description: The ID of the user
        schema:
          type: string
          minimum: 1
    delete:
      tags:
        - user management
      description: Deletesa user
      responses:
        # wrong response code - this is no conent - there should be no content
        204:
          description: Successfully deleted user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericResponse"

components:
  schemas:
    User:
      description: A user of the system
      type: object
      properties:
        userId:
          type: number
        userName:
          type: string
        email:
          type: string
    GenericResponse:
      description: A generic response object with a message attribute
      type: object
      properties:
        message:
          type: string

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
security:
  - BasicAuth: []
